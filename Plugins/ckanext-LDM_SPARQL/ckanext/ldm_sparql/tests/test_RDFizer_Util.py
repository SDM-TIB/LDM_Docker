# pytest --ckan-ini=test.ini ckanext/ldm_sparql/tests/test_RDFizer_Util.py -s

from ckanext.ldm_sparql.RDFizer_Util import RDFizer_Util
from ckanext.ldm_sparql.tests.Mocks import default_config_file, default_config_setting_mapping, default_config_changing_values, \
    default_config_setting_output_folder, mocked_package_show_dict, mocked_package_list_dict, mocked_package_show_service_dict, \
    parsing_formats_result

from unittest.mock import Mock, patch

import filecmp
import os

# def test_write_config_file_default():
#
#     obj = RDFizer_Util()
#
#     with open(obj.RDFizer_config_file, 'r') as f:
#         conf_file = f.read()
#
#     assert conf_file == default_config_file
#
# def test_write_config_file_setting_mapping():
#
#     obj = RDFizer_Util("example_mapping.ttl")
#
#     with open(obj.RDFizer_config_file, 'r') as f:
#         conf_file = f.read()
#     assert conf_file == default_config_setting_mapping
#
# def test_write_config_file_setting_output_folder():
#
#     output_folder = "/output_folder/example"
#     obj = RDFizer_Util(output_folder = output_folder)
#
#     assert obj.RDFizer_output_folder == output_folder
#
# def test_write_config_file_changing_values():
#
#     obj = RDFizer_Util(dataset_config = {"name": "newname", "ordered": "no"})
#
#     with open(obj.RDFizer_config_file, 'r') as f:
#         conf_file = f.read()
#     # print('\n', "test_write_config_file_changing_values:")
#     # print(" ***************************************", '\n')
#     # print(conf_file)
#     assert conf_file == default_config_changing_values
#
# def test_search_LDM_local_dataset_not_found():
#     obj = RDFizer_Util()
#
#     ds_name = "TEST-3499-944kdf20"
#     res_dict = obj.get_LDM_local_dataset(ds_name)
#     assert res_dict == {}
#
# def mocked_package_show(*args, **kwargs):
#
#     return mocked_package_show_dict
#
# @patch('ckanext.ldm_sparql.RDFizer_Util.RDFizer_Util.get_LDM_local_dataset', side_effect=mocked_package_show)
# def test_search_local_dataset_found(mock_get):
#     obj = RDFizer_Util()
#
#     ds_name = "notusedid"
#     res_dict = obj.get_LDM_local_dataset(ds_name)
#
#     # print('\n', "test_search_local_dataset_found:")
#     # print(" ********************************", '\n')
#     # print(res_dict)
#     assert res_dict == mocked_package_show_dict
#
#
#
# def mocked_package_list(*args, **kwargs):
#
#     return mocked_package_list_dict
#
# @patch('ckanext.ldm_sparql.RDFizer_Util.RDFizer_Util.get_LDM_local_datasets_list', side_effect=mocked_package_list)
# def test_get_LDM_local_datasets_list_found(mock_get):
#     obj = RDFizer_Util()
#
#     res_dict = obj.get_LDM_local_datasets_list()
#
#     # print('\n', "test_get_LDM_local_datasets_list_found:")
#     # print(" ********************************", '\n')
#     # print(res_dict)
#     assert res_dict == mocked_package_list_dict
#
#
# @patch('ckanext.ldm_sparql.RDFizer_Util.RDFizer_Util.get_LDM_local_dataset', side_effect=mocked_package_show)
# def test_write_dataset_dict_to_json_file(mock_get):
#     obj = RDFizer_Util()
#
#     ds_name = "notusedid"
#     res_dict = obj.get_LDM_local_dataset(ds_name)
#
#     output_file = "/usr/lib/ckan/default/src/ckanext-LDM_SPARQL/ckanext/ldm_sparql/tests/RDFizer_example/output/dataset.json"
#
#     obj.write_dataset_dict_to_json_file(output_file, res_dict)
#
#     expected_file = "/usr/lib/ckan/default/src/ckanext-LDM_SPARQL/ckanext/ldm_sparql/tests/RDFizer_example/output/expected_dataset.json"
#
#     result = filecmp.cmp(output_file, expected_file)
#     assert result
#
# def test_RDFizer_example():
#
#     output_folder = "/usr/lib/ckan/default/src/ckanext-LDM_SPARQL/ckanext/ldm_sparql/tests/RDFizer_example/output"
#     output_file = output_folder + '/example_csv_ttl.ttl'
#
#     # delete output file if exists
#     if os.path.exists(output_file):
#         os.remove(output_file)
#
#     dataset_config = {
#         "remove_duplicate": "yes",
#         "all_in_one_file": "no",
#         "name": "example_csv_ttl",
#         "enrichment": "yes",
#         "ordered": "yes",
#         "output_format": "turtle"
#     }
#     obj = RDFizer_Util("example_mapping_csv.ttl", output_folder, dataset_config)
#
#     # print('\n', "test_RDFizer_example:")
#     # print(" *********************", '\n')
#     # print("Config: ", obj.RDFizer_dataset_config, '\n')
#     # print("Output: ", obj.RDFizer_output_folder, '\n')
#     # print("Mapping: ", obj.RDFizer_mapping_file, '\n')
#
#     obj.run_RDFizer()
#
#     # assert true if file was generated by rdfizer
#     assert os.path.exists(output_file)
#
#
# def test_RDFizer_example_json():
#
#     output_folder = "/usr/lib/ckan/default/src/ckanext-LDM_SPARQL/ckanext/ldm_sparql/tests/RDFizer_example/output"
#     output_file = output_folder + '/example_json_nt.nt'
#
#     # delete output file if exists
#     if os.path.exists(output_file):
#         os.remove(output_file)
#
#     dataset_config = {
#         "remove_duplicate": "yes",
#         "all_in_one_file": "no",
#         "name": "example_json_nt",
#         "enrichment": "yes",
#         "ordered": "yes",
#         "output_format": "n-triples"
#     }
#     obj = RDFizer_Util("example_mapping_json.ttl", output_folder, dataset_config)
#
#     # print('\n', "test_RDFizer_example_json:")
#     # print(" *********************", '\n')
#     # print("Config: ", obj.RDFizer_dataset_config, '\n')
#     # print("Output: ", obj.RDFizer_output_folder, '\n')
#     # print("Mapping: ", obj.RDFizer_mapping_file, '\n')
#
#     obj.run_RDFizer()
#
#     # assert true if file was generated by rdfizer
#     assert os.path.exists(output_file)


def test_RDFizer_example_dataset_json():

    output_folder = "/usr/lib/ckan/default/src/ckanext-LDM_SPARQL/ckanext/ldm_sparql/tests/RDFizer_example/output"
    output_file = output_folder + '/example_dataset_json_nt.nt'

    # delete output file if exists
    if os.path.exists(output_file):
        os.remove(output_file)

    dataset_config = {
        "remove_duplicate": "yes",
        "all_in_one_file": "no",
        "name": "example_dataset_json_nt",
        "enrichment": "yes",
        "ordered": "yes",
        "output_format": "n-triples"
    }
    obj = RDFizer_Util("example_mapping_dataset_json2.ttl", output_folder, dataset_config)

    # print('\n', "test_RDFizer_example_dataset_json:")
    # print(" *********************", '\n')
    # print("Config: ", obj.RDFizer_dataset_config, '\n')
    # print("Output: ", obj.RDFizer_output_folder, '\n')
    # print("Mapping: ", obj.RDFizer_mapping_file, '\n')

    obj.run_RDFizer()

    # assert true if file was generated by rdfizer
    assert os.path.exists(output_file)


def test_convert_dataset_dict_to_DCAT():

    obj = RDFizer_Util()
    dataset_name = 'example-cad-2'
    output_file = obj.RDFizer_output_folder + '/' + dataset_name + '.nt'
    # delete output file if exists
    if os.path.exists(output_file):
        os.remove(output_file)

    #dataset_dict = obj.get_LDM_local_dataset(dataset_name)
    dataset_dict = mocked_package_show_dict
    obj.convert_dataset_dict_to_DCAT(dataset_dict)
    print("\nOutput file: ", output_file)
    res = os.path.exists(output_file)
    # delete output file if exists
    # if os.path.exists(output_file):
    #     os.remove(output_file)
    assert res

# TEST A SERVICE
def test_convert_dataservice_dict_to_DCAT():

    obj = RDFizer_Util()
    dataset_name = 's2'
    output_file = obj.RDFizer_output_folder + '/' + dataset_name + '.nt'
    # delete output file if exists
    if os.path.exists(output_file):
        os.remove(output_file)

    #dataset_dict = obj.get_LDM_local_dataset(dataset_name)
    dataset_dict = mocked_package_show_service_dict
    obj.convert_dataset_dict_to_DCAT(dataset_dict)
    print("\nOutput file: ", output_file)
    res = os.path.exists(output_file)
    # delete output file if exists
    # if os.path.exists(output_file):
    #     os.remove(output_file)
    assert res

def test_convert_RDF_to_format():
    obj = RDFizer_Util()
    dataset_name = 'example-cad-2'
    output_file = obj.RDFizer_output_folder + '/' + dataset_name + '.nt'

    allowed_formats = obj.RDF_allowed_formats
    # delete output file if exists
    if os.path.exists(output_file):
        os.remove(output_file)

    # dataset_dict = obj.get_LDM_local_dataset(dataset_name)
    dataset_dict = mocked_package_show_dict
    obj.convert_dataset_dict_to_DCAT(dataset_dict)

    for f in allowed_formats.keys():
        output_file_ff = dataset_name + '.' + allowed_formats[f]
        # delete output file if exists
        if os.path.exists(obj.RDFizer_output_folder + '/parsed/' + output_file_ff):
            os.remove(obj.RDFizer_output_folder + '/parsed/' + output_file_ff)


        obj.convert_RDF_to_format(output_file, f, output_file_ff)

        res = os.path.exists(obj.RDFizer_output_folder + '/parsed/' + output_file_ff)

        # delete output file if exists
        if os.path.exists(obj.RDFizer_output_folder + '/parsed/' + output_file_ff):
            os.remove(obj.RDFizer_output_folder + '/parsed/' + output_file_ff)

        assert res

    if os.path.exists(output_file):
        os.remove(output_file)

def test_delete_RDF_parsed_files_for_dataset():
    obj = RDFizer_Util()
    dataset_name = 'example-cad-2'
    output_file = obj.RDFizer_output_folder + '/' + dataset_name + '.nt'

    allowed_formats = obj.RDF_allowed_formats
    # delete output file if exists
    if os.path.exists(output_file):
        os.remove(output_file)

    # Create DCAT nt file
    dataset_dict = mocked_package_show_dict
    obj.convert_dataset_dict_to_DCAT(dataset_dict)

    # Create parsed files
    for f in allowed_formats.keys():
        output_file_ff = dataset_name + '.' + allowed_formats[f]
        # delete output file if exists
        if os.path.exists(obj.RDFizer_output_folder + '/parsed/' + output_file_ff):
            os.remove(obj.RDFizer_output_folder + '/parsed/' + output_file_ff)

        obj.convert_RDF_to_format(output_file, f, output_file_ff)

        res = os.path.exists(obj.RDFizer_output_folder + '/parsed/' + output_file_ff)
        assert res # File was created

    # Delete parsed files
    obj.delete_RDF_parsed_files_for_dataset(dataset_name)

    # Check deletion
    for f in allowed_formats.keys():
        output_file_ff = dataset_name + '.' + allowed_formats[f]
        res = os.path.exists(obj.RDFizer_output_folder + '/parsed/' + output_file_ff)
        assert not res # File was deleted

    if os.path.exists(output_file):
        os.remove(output_file)


def test_get_DCAT_data_from():

    obj = RDFizer_Util()
    dataset_name = 'example-cad-2'
    output_file = obj.RDFizer_output_folder + '/' + dataset_name + '.nt'
    dcat_data = {}
    allowed_formats = obj.RDF_allowed_formats

    # delete output file if exists
    if os.path.exists(output_file):
        os.remove(output_file)
    for f in allowed_formats.keys():
        output_file_ff = dataset_name + '.' + allowed_formats[f]
        # delete output file if exists
        if os.path.exists(obj.RDFizer_output_folder + '/parsed/' + output_file_ff):
            os.remove(obj.RDFizer_output_folder + '/parsed/' + output_file_ff)

    for f in allowed_formats.keys():
        dcat_data[f] = obj.get_DCAT_data_from(dataset_name, f)

    for f in allowed_formats.keys():
        output_file_ff = dataset_name + '.' + allowed_formats[f]
        # delete output file if exists
        if os.path.exists(obj.RDFizer_output_folder + '/parsed/' + output_file_ff):
            os.remove(obj.RDFizer_output_folder + '/parsed/' + output_file_ff)
        # delete output file if exists
        if os.path.exists(output_file):
            os.remove(output_file)

    print("\nDCAT DATA: ", dcat_data)

    assert dcat_data.keys() == parsing_formats_result.keys()


def test_copy_Dataset_RDFfile_to_folder():

    output_folder = "/usr/lib/ckan/default/src/ckanext-LDM_SPARQL/ckanext/ldm_sparql/tests/RDFizer_example/output"
    dest_folder = output_folder+'/test_copy'
    os.makedirs(dest_folder, exist_ok=True)

    obj = RDFizer_Util()

    # Test ds name invalid
    dataset_name = 'xxx3243243369987opszf'
    res = obj.copy_Dataset_RDFfile_to_folder(dataset_name, dest_folder)
    assert res == "ERROR: Dataset name is not valid."

    # Test destination folder not valid
    dataset_name = 'example-cad-2'
    res = obj.copy_Dataset_RDFfile_to_folder(dataset_name, 'wrong_folder')
    assert res == "ERROR: Destination folder is not valid."

    # Test copy OK
    dataset_name = 'example-cad-2'
    res = obj.copy_Dataset_RDFfile_to_folder(dataset_name, dest_folder)
    assert res == "File " + dest_folder + "/example-cad-2.nt was created."
    os.remove(dest_folder+"/example-cad-2.nt")
    os.rmdir(dest_folder)



